Index: noq/bin/__init__.py
===================================================================
--- noq.orig/bin/__init__.py	2012-10-26 14:44:28.088121502 +0200
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,16 +0,0 @@
-# -*- coding: utf-8 -*-
-
-# Copyright (c) 2010-2012, GEM Foundation.
-#
-# OpenQuake is free software: you can redistribute it and/or modify it
-# under the terms of the GNU Affero General Public License as published
-# by the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# OpenQuake is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU Affero General Public License
-# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.
Index: noq/bin/cache_gc.py
===================================================================
--- noq.orig/bin/cache_gc.py	2012-10-26 14:44:28.088121502 +0200
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,156 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
-# vim: tabstop=4 shiftwidth=4 softtabstop=4
-
-# Copyright (c) 2010-2012, GEM Foundation.
-#
-# OpenQuake is free software: you can redistribute it and/or modify it
-# under the terms of the GNU Affero General Public License as published
-# by the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# OpenQuake is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU Affero General Public License
-# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.
-
-
-"""
-This tool is used for performing garbage collection on OpenQuake KVS cache
-data.
-
-  -h | --help   : prints this help string
-  -j | --job J  : clear KVS cache data for the given job ID
-  -l | --list   : list currently cached jobs
-"""
-
-import getopt
-import sys
-
-import oqpath
-oqpath.set_oq_path()
-
-from openquake import kvs
-from openquake import logs
-
-LOG = logs.LOG
-
-SHORT_ARGS = 'hlj:'
-LONG_ARGS = ['help', 'job=', 'list']
-# map short args to long args
-S2L = dict(h='help', j='job', l='list')
-
-
-def main(cl_args):
-    """
-    :param cl_args: command line arguments
-    :type cl_cargs: list of strings
-    """
-    try:
-        opts, _ = getopt.getopt(cl_args, SHORT_ARGS, LONG_ARGS)
-    except getopt.GetoptError, e:
-        # Invalid arg specified; print the error and help, then exit
-        print e
-        show_help()
-
-    # strip dashes
-    opts = [(strip_dashes(opt), val) for opt, val in opts]
-
-    # convert everything to long args
-    opts = [(S2L.get(opt, opt), val) for opt, val in opts]
-
-    # process the args in the order they were given
-    # some arguments may be ignored
-    for opt, val in opts:
-        if opt == 'help':
-            show_help()
-        elif opt == 'list':
-            list_cached_jobs()
-            break
-        elif opt == 'job':
-            clear_job_data(val)
-            break
-        else:
-            print "Unknown option: %s" % opt
-            show_help()
-
-
-def strip_dashes(arg):
-    """
-    Remove leading dashes, return last portion of string remaining.
-    """
-    return arg.split('-')[-1]
-
-
-def _get_current_job_ids():
-    """
-    Get a list of the current jobs from the KVS and parse out the numeric job
-    IDs.
-
-    :returns: list of ints
-    """
-    jobs = [int(x) for x in kvs.current_jobs()]
-
-    return sorted(jobs)
-
-
-def list_cached_jobs():
-    """
-    List the jobs which are currently cached in the KVS.
-
-    Invoked by the -l or --list command line arg.
-    """
-    job_ids = _get_current_job_ids()
-
-    if len(job_ids) > 0:
-        # print the jobs
-        print 'Currently cached jobs:'
-        for job in job_ids:
-            print job
-
-    else:
-        # there are no jobs
-        print 'There are currently no jobs cached.'
-
-
-def clear_job_data(job_id):
-    """
-    Clear KVS cache data for the given job. This is done by searching in the
-    KVS for keys matching a job key (derived from the job_id) and deleting each
-    result.
-
-    Invoked by the -j or --job command line arg.
-
-    :param job_id: job ID as an integer
-    """
-
-    try:
-        job_id = int(job_id)
-    except ValueError:
-        print 'Job ID should be an integer.'
-        print 'Use the --list option to show current jobs.'
-        raise
-
-    LOG.info('Attempting to clear cache data for job %s...' % job_id)
-
-    result = kvs.cache_gc(job_id)
-
-    if result is None:
-        LOG.info('Job %s not found.' % job_id)
-    else:
-        LOG.info('Removed %s keys.' % result)
-
-
-def show_help():
-    """
-    Display help documentation for this utility and exit.
-    """
-    print __doc__
-    sys.exit()
-
-
-if __name__ == '__main__':
-    main(sys.argv[1:])
Index: noq/bin/create_oq_schema
===================================================================
--- noq.orig/bin/create_oq_schema	2012-10-26 14:44:28.088121502 +0200
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,262 +0,0 @@
-#!/bin/bash
-
-help() {
-cat <<HSD
-`basename $0` initialises the given database with the OpenQuake schema.
-Also, table space paths are created as needed (unless this is turned off
-by the user).
-
-!! This will *destroy* all data in the OpenQuake database !!
-
-The command line arguments are as follows:
-
-    --db-name=name      The name of the database to set up.
-    --db-port=port      The postgresql server port (default: 5432)
-    --db-user=user      Run all commands as this database user [postgres].
-    --no-tab-spaces     Don't check/create table spaces and their paths
-    --schema-path=path  Absolute path to directory with the schema files.
-    --tab-spaces-only   Check/create table spaces and their paths and exit
-    --yes               Don't pause for user input, assume yes on all questions
-HSD
-exit 0
-}
-
-if [ $# -eq 0 ]; then
-    help
-fi
-
-# Openquake version
-oq_version="0.5.0"
-
-# Stop at the first error in a batch to give a chance to see the error message
-psql_batch_options='--set ON_ERROR_STOP=1'
-
-# Where do the table spaces live?
-tspace_path='/var/lib/postgresql/9.1/main/ts'
-# What table spaces should be created?
-tspace_list="admin eqcat hzrdi hzrdr oqmif riski riskr uiapi htemp"
-
-db_port=5432
-schema_path=""
-db_name=""
-user_interaction="on"
-check_table_spaces="on"
-table_spaces_only="off"
-
-db_admin_user="postgres"
-
-this_is_linux=0
-# Are we running on linux?
-if [ -f "`which uname`" ]; then
-    os_name=`uname | tr '[:upper:]' '[:lower:]' | cut -f1`
-    if [ "$os_name" = "linux" ]; then
-        this_is_linux=1
-    fi
-fi
-
-# What is the name of the db group that all OpenQuake db users belong to?
-db_group_name="openquake"
-
-# What OpenQuake db users should be created? The construct below is the bash
-# way to assign a heredoc value to a variable BTW.
-read -r -d '' db_roles <<'EOF'
-opengeo_reader
-opengeo_writer
-oq_admin
-oq_eqcat_reader
-oq_eqcat_writer
-oq_job_init
-oq_job_superv
-oq_reslt_writer
-EOF
-
-for i in $*
-do
-    case $i in
-    --schema-path=*)
-        schema_path=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
-        test \( -d "$schema_path" -a -r "$schema_path" \)
-        if [ $? -ne 0 ]; then
-            echo "!! Schema path $schema_path does not exist or is not readable."
-            exit 1
-        fi
-        ;;
-    --db-name=*)
-        db_name=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
-        ;;
-    --db-port=*)
-        db_port=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
-        ;;
-    --db-user=*)
-        db_admin_user=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
-        ;;
-    --no-tab-spaces)
-        check_table_spaces="off"
-        ;;
-    --tab-spaces-only)
-        table_spaces_only="on"
-        ;;
-    -y|--yes)
-        user_interaction="off"
-        ;;
-    -h|--help)
-        help
-        ;;
-    *)
-        echo "!! Uknown option: " $i
-        exit 2
-        ;;
-    esac
-done
-
-schema_file="$schema_path/openquake.sql"
-
-if [ -z "$db_name" ]; then
-    echo "!! Please specify a database name."
-    exit 3
-fi
-
-if [ "$(id -u)" != "0" ]; then
-    echo ""
-    echo "!! This script should be run as root."
-    if [ "$user_interaction" = "on" ]; then
-        echo "!! Press <enter> to continue, or <ctrl>-C to abort"
-        read
-    fi
-fi
-
-
-if [ "$table_spaces_only" == "off" ]; then
-    # None of this is relevant if we only want to check table spaces.
-    if [ ! -r $schema_file ]; then
-        echo "!! Could not find/read schema file: $schema_file"
-        exit 5
-    fi
-
-    if [ "$user_interaction" = "on" ]; then
-        # Last chance to abort.
-        echo '!! This will destroy *ALL* data in the OpenQuake database !!'
-        echo 'Press <enter> to continue'
-        read
-    fi
-
-    # Drop database
-    echo ".. Dropping database $db_name .."
-    psql -p $db_port -d postgres -U $db_admin_user -c "DROP DATABASE IF EXISTS $db_name"
-    # Drop table spaces..
-    if [ "$check_table_spaces" == "on" ]; then
-        for tspace in $tspace_list; do
-            full_ts_name="${tspace}_ts"
-            echo ".. Dropping table space $full_ts_name .."
-            psql -p $db_port -d postgres -U $db_admin_user -c "DROP TABLESPACE IF EXISTS $full_ts_name"
-        done
-    fi
-else
-    check_table_spaces="on"
-fi
-
-echo -n ".. Current table spaces: "
-echo `psql -p $db_port -U $db_admin_user -c '\db' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }'`
-
-if [ "$check_table_spaces" == "on" ]; then
-    # Create table spaces if needed.
-    for tspace in $tspace_list; do
-        full_ts_name="${tspace}_ts"
-        full_tspace_path="$tspace_path/$full_ts_name"
-
-        # Create table space path if needed.
-        test -d "$full_tspace_path"
-        if [ $? -ne 0 ]; then
-            echo ".. Creating table space path $full_tspace_path .."
-            mkdir -p $full_tspace_path
-            if [ $this_is_linux -eq 1 ]; then
-                chown -R postgres.postgres $full_tspace_path
-            else
-                chown -R postgres $full_tspace_path
-            fi
-        fi
-
-        # Create the actual table space.
-        ts_found=`psql -p $db_port -U $db_admin_user -c '\db' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $full_ts_name | wc -l`
-        if [ $ts_found -eq 0 ]; then
-            psql -p $db_port -d postgres -U $db_admin_user -c "CREATE TABLESPACE $full_ts_name LOCATION '$full_tspace_path'"
-            if [ "$table_spaces_only" == "on" ]; then
-                psql -p $db_port -U $db_admin_user -d $db_name -c "DELETE FROM admin.revision_info WHERE artefact = 'openquake/${tspace}'"
-                psql -p $db_port -U $db_admin_user -d $db_name -c "INSERT INTO admin.revision_info(artefact, revision, step) VALUES('openquake/${tspace}', '${oq_version}', 0)"
-            fi
-        fi
-    done
-fi
-
-if [ "$table_spaces_only" == "on" ]; then
-    exit 0
-fi
-
-# Starting from here this script is executing many batches
-# Stopping as soon as one fails makes the error stand out
-set -e
-
-# Create the OpenQuake database
-echo ".. Creating database $db_name .."
-psql -p $db_port -d postgres -U $db_admin_user -c "CREATE DATABASE $db_name"
-createlang -p $db_port -d $db_name -U $db_admin_user plpythonu
-
-postgis="/usr/share/postgresql/9.1/contrib/postgis-1.5"
-# Load the PostGIS stuff into the newly created OpenQuake database.
-echo ".. Loading postgis functions/data into $db_name .."
-psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/postgis.sql
-
-psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/spatial_ref_sys.sql
-psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f /usr/share/postgresql/9.1/contrib/postgis_comments.sql
-
-echo ".. Running schema definition file: $schema_file .."
-psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $schema_file
-
-# Apply database function definitions if present.
-functions_file="$schema_path/functions.sql"
-if [ -r $functions_file ]; then
-    echo ".. Running functions file: $functions_file .."
-    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $functions_file
-fi
-
-# Load static data if present.
-load_file="$schema_path/load.sql"
-if [ -r $load_file ]; then
-    echo ".. Loading static data from: $load_file .."
-    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $load_file
-fi
-
-# Apply database schema/table comments if present.
-comments_file="$schema_path/comments.sql"
-if [ -r $comments_file ]; then
-    echo ".. Running comments file: $comments_file .."
-    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $comments_file
-fi
-
-# Create OpenQuake database group if not present.
-oq_group_present=`psql -p $db_port -U $db_admin_user -c '\dg' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $db_group_name | wc -l`
-if [ $oq_group_present -eq 0 ]; then
-    psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $db_group_name"
-fi
-
-# Create OpenQuake database users/roles if/as needed.
-for role in $db_roles; do
-    role_present=`psql -p $db_port -U $db_admin_user -c '\dg' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $role | wc -l`
-    if [ $role_present -eq 0 ]; then
-        psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $role WITH LOGIN IN GROUP openquake"
-    fi
-done
-
-# Apply database security settings if present.
-security_file="$schema_path/security.sql"
-if [ -r $security_file ]; then
-    echo ".. Running security settings file: $security_file .."
-    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $security_file
-fi
-
-# Apply database table indexes if present.
-indexes_file="$schema_path/indexes.sql"
-if [ -r $indexes_file ]; then
-    echo ".. Applying index definitions: $indexes_file .."
-    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $indexes_file
-fi
Index: noq/bin/openquake
===================================================================
--- noq.orig/bin/openquake	2012-10-29 09:37:47.442554795 +0100
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,363 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
-# vim: tabstop=4 shiftwidth=4 softtabstop=4
-
-"""OpenQuake: software for seismic hazard and risk assessment
-
-It receives its inputs through a configuration file plus input data in .xml
-format and stores the results in .xml format.
-
-Available Hazard Analysis
-
-  Classical PSHA
-    Input   Source Model Logic Tree
-            GMPE Logic Tree
-
-    Output  Hazard maps
-            Hazard curves
-
-  Event-Based PSHA
-    Input   Source Model Logic Tree
-            GMPE Logic Tree
-
-    Output  Ground Motion fields
-
-  Scenario SHA
-    Input   Rupture Model
-
-    Output  Ground Motion fields
-
-Available Risk Analysis
-
-  Classical PSHA-based
-    Input   Exposure (a value per asset)
-            Vulnerability curves (a list of vulnerability functions)
-            Seismic hazard input: hazard curves
-
-    Output  A grid of loss-ratio curves
-            A grid of loss curves
-            A map of losses at each interval
-
-  Probabilistic event-based
-    Input   Exposure (a value per asset)
-            Vulnerability curves (a list of vulnerability functions)
-            Seismic hazard input: sets of ground motion fields
-
-    Output  A grid of loss-ratio curves
-            A grid of loss curves
-            A map of losses at each interval
-            An aggregated loss curve
-
-"""
-
-import argparse
-import getpass
-import logging
-import os
-import sys
-
-from openquake.utils import config
-
-config.abort_if_no_config_available()
-
-try:
-    import celeryconfig
-except ImportError:
-    sys.path.append('/usr/openquake')
-
-import oqpath
-oqpath.set_oq_path()
-
-from openquake import __version__
-from openquake.db import models
-from openquake.export import core as export
-from openquake.export import hazard as hazard_export
-from openquake.utils import version as utils_version
-
-
-def set_up_arg_parser():
-    """Set up and return an :class:`argparse.ArgumentParser` with all of the
-    OpenQuake command line options."""
-    parser = argparse.ArgumentParser(
-        description='OpenQuake - Seismic Hazard and Risk Analysis Engine')
-
-    general_grp = parser.add_argument_group('General')
-    general_grp.add_argument(
-        '--version', action='store_true', help='Display version information')
-    general_grp.add_argument(
-        '--force-inputs', action='store_true',
-        help='Parse model inputs and write them to the DB no matter what')
-    general_grp.add_argument(
-        '--log-file', '-L',
-        help=('Location to store log messages; if not specified, log messages'
-              ' will be printed to the console'),
-        required=False, metavar='LOG_FILE')
-    general_grp.add_argument(
-        '--log-level', '-l',
-        help='Defaults to "warn"', required=False,
-        choices=['debug', 'info', 'progress', 'warn', 'error', 'critical'],
-        default='progress')
-
-    hazard_grp = parser.add_argument_group('Hazard')
-    hazard_grp.add_argument(
-        '--run-hazard', help='Run a hazard job with the specified config file',
-        metavar='CONFIG_FILE')
-    hazard_grp.add_argument(
-        '--list-hazard-calculations',
-        help='List hazard calculation information',
-        action='store_true')
-    hazard_grp.add_argument(
-        '--list-hazard-outputs',
-        help='List outputs for the specified hazard calculation',
-        metavar='HAZARD_CALCULATION_ID')
-    hazard_grp.add_argument(
-        '--export-hazard',
-        help='Export the desired output to the specified directory',
-        nargs=2, metavar=('OUTPUT_ID', 'TARGET_DIR'))
-
-    calc_grp = parser.add_argument_group('Run calculations')
-    calc_grp.add_argument(
-        '--config-file', '--config_file',
-        help='(DEPRECATED) Run a calculation with the specifed config file',
-        metavar='CONFIG_FILE')
-    calc_grp.add_argument(
-        '--output-type', '--output_type',
-        help='(DEPRECATED) Defaults to "db"', required=False,
-        choices=['db', 'xml'], default='db')
-
-    export_grp = parser.add_argument_group('List and export')
-    export_grp.add_argument(
-        '--list-calculations',
-        help='(DEPRECATED) List completed calculations', action='store_true')
-    export_grp.add_argument(
-        '--list-outputs',
-        help='(DEPRECATED) List outputs for a completed calculation', type=int,
-        metavar='CALCULATION_ID')
-    export_grp.add_argument(
-        '--export',
-        help=('(DEPRECATED) Export the desired output to the specified '
-              'directory'),
-        nargs=2, metavar=('OUTPUT_ID', 'TARGET_DIR'))
-    export_grp.add_argument(
-        '--exports', choices=['xml'],  default=[], action="append",
-        help='Post-calculation exports, if any. Only "xml" is supported')
-
-    return parser
-
-
-def run_hazard(cfg_file, log_level, log_file, force_inputs, exports):
-    """
-    Run a hazard calculation using the specified config file and other options.
-
-    :param str cfg_file:
-        Path to calculation config (INI-style) file.
-    :param str log_level:
-        'debug', 'info', 'warn', 'error', or 'critical'
-    :param str log_file:
-        Path to log file.
-    :param bool force_inputs:
-        If `True`, don't attempt to reuse existing identical inputs; instead,
-        import fresh copies.
-    :param list exports:
-        A list of export types requested by the user, currently only 'xml'
-        is supported
-    """
-    from openquake import engine2
-    from openquake.job import validation
-
-    try:
-        if log_file is not None:
-            try:
-                _touch_log_file(log_file)
-            except IOError as e:
-                raise IOError('Error writing to log file %s: %s'
-                              % (log_file, e.strerror))
-
-        job = engine2.prepare_job(user_name=getpass.getuser(), log_level=log_level)
-        params, files = engine2.parse_config(
-            open(cfg_file, 'r'), force_inputs=force_inputs)
-        calculation = engine2.create_hazard_calculation(job.owner, params,
-                                                        files.values())
-        job.hazard_calculation = calculation
-        job.save()
-
-        # Validate the job:
-        calc_mode = job.hazard_calculation.calculation_mode
-        form_class = validation.VALIDATOR_MAP.get(calc_mode)
-        if form_class is None:
-            print 'Calculation mode "%s" not supported' % calc_mode
-            sys.exit(1)
-
-        form = form_class(instance=calculation, files=files, exports=exports)
-        # For now, just print whether or not the job is valid
-        # (and any errors if it isn't valid)
-        if not form.is_valid():
-            print ('Job configuration is not valid. Errors: %s'
-                   % dict(form.errors))
-            sys.exit(1)
-
-        # Initialize the supervisor, instantiate the calculator,
-        # and run the calculation.
-        completed_job = engine2.run_hazard(job, log_level, log_file, exports)
-        if completed_job is not None:
-            # We check for `None` here because the supervisor and executor
-            # process forks return to here as well. We want to ignore them.
-            if completed_job.status == 'complete':
-                print 'Job %s ran successfully' % completed_job.id
-            else:
-                print 'Job %s failed' % completed_job.id
-    except IOError as e:
-        print str(e)
-    except Exception as e:
-        raise
-
-
-def list_hazard_calculations():
-    print "Hazard calculations:"
-    hcs = models.HazardCalculation.objects.filter(
-        owner__user_name=getpass.getuser())
-    if len(hcs) == 0:
-        print 'None'
-    else:
-        for hc in hcs:
-            print 'Calculation ID: %s, Description: %s' % (
-                hc.id, hc.description)
-            jobs = models.OqJob.objects.filter(hazard_calculation=hc.id)
-            for j in jobs:
-                if j.is_running:
-                    status = 'pending'
-                else:
-                    if j.status == 'complete':
-                        status = 'successful'
-                    else:
-                        status = 'failed'
-                print '\tJob ID: %s, Status: %s' % (j.id, status)
-
-
-def list_hazard_outputs(hc_id):
-    """
-    List the outputs for a given
-    :class:`~openquake.db.models.HazardCalculation`.
-
-    :param hc_id:
-        ID of a hazard calculation.
-    """
-    outputs = models.Output.objects.filter(oq_job__hazard_calculation=hc_id)
-    if len(outputs) > 0:
-        print 'ID\tOuput Type'
-        for o in outputs:
-            print '%s\t%s' % (o.id, o.output_type)
-
-
-def export_hazard(haz_output_id, target_dir):
-    """
-    Simple UI wrapper around
-    :func:`openquake.export.hazard.export` which prints a summary of files
-    exported, if any.
-    """
-    from django.core.exceptions import ObjectDoesNotExist
-    try:
-        files = hazard_export.export(haz_output_id, target_dir)
-        if len(files) > 0:
-            print 'Files Exported:'
-            for f in files:
-                print f
-    except NotImplementedError, err:
-        print err.message
-        print 'This feature is probably not implemented yet'
-    except ObjectDoesNotExist:
-        print 'No output found for OUTPUT_ID %s' % output_id
-
-
-def _touch_log_file(log_file):
-    """If a log file destination is specified, attempt to open the file in
-    'append' mode ('a'). If the specified file is not writable, an
-    :exc:`IOError` will be raised."""
-    open(os.path.abspath(log_file), 'a').close()
-
-
-def list_calculations():
-    """
-    Deprecated.
-
-    Simple UI wrapper around
-    :func:`openquake.export.core.get_jobs`. It prints the results in
-    a nice way."""
-    jobs = export.get_jobs(getpass.getuser())
-    if len(jobs) > 0:
-        print 'ID\tStatus\tDescription'
-        for c in jobs:
-            # TODO: For now, only display hazard calculations
-            if c.hazard_calculation is not None:
-                print '%s\t%s\t%s' % (c.id, c.status,
-                                      c.hazard_calculation.description)
-
-
-def list_outputs(job_id):
-    """
-    Deprecated.
-
-    Simple UI wrapper arround
-    :func:`openquake.export.core.get_outputs`. It prints the results in a
-    nice way."""
-    outputs = export.get_outputs(job_id)
-    if len(outputs) > 0:
-        print 'ID\tOuput Type'
-        for o in outputs:
-            print '%s\t%s' % (o.id, o.output_type)
-
-
-def do_export(output_id, target_dir):
-    """
-    Deprecated.
-
-    Simple UI wrapper around
-    :func:`openquake.export.core.export`. It prints the results in a nice
-    way."""
-    from django.core.exceptions import ObjectDoesNotExist
-    try:
-        files = export.export(output_id, target_dir)
-        if len(files) > 0:
-            print 'Files Exported:'
-            for f in files:
-                print f
-    except NotImplementedError, err:
-        print err.message
-        print 'This feature is probably not implemented yet'
-    except ObjectDoesNotExist:
-        print 'No output found for OUTPUT_ID %s' % output_id
-
-
-if __name__ == '__main__':
-    arg_parser = set_up_arg_parser()
-
-    args = arg_parser.parse_args()
-
-    if args.version:
-        print utils_version.info(__version__)
-    elif args.list_hazard_calculations:
-        list_hazard_calculations()
-    elif args.list_hazard_outputs:
-        list_hazard_outputs(args.list_hazard_outputs)
-    elif args.export_hazard is not None:
-        output_id, target_dir = args.export_hazard
-        output_id = int(output_id)
-
-        export_hazard(output_id, target_dir)
-    elif args.run_hazard is not None:
-        run_hazard(args.run_hazard, args.log_level, args.log_file,
-                   args.force_inputs, args.exports)
-    elif args.config_file is not None:
-        raise NotImplementedError("--config-file is not supported any more "
-                                  "please use --run-hazard instead")
-    elif args.list_calculations:
-        list_calculations()
-    elif args.list_outputs is not None:
-        list_outputs(args.list_outputs)
-    elif args.export is not None:
-        output_id, target_dir = args.export
-        output_id = int(output_id)
-
-        do_export(output_id, target_dir)
-    else:
-        arg_parser.print_usage()
Index: noq/bin/openquake_supervisor
===================================================================
--- noq.orig/bin/openquake_supervisor	2012-10-26 14:44:28.092121575 +0200
+++ /dev/null	1970-01-01 00:00:00.000000000 +0000
@@ -1,43 +0,0 @@
-#! /usr/bin/env python
-
-# -*- coding: utf-8 -*-
-# vim: tabstop=4 shiftwidth=4 softtabstop=4
-
-# Copyright (c) 2010-2012, GEM Foundation.
-#
-# OpenQuake is free software: you can redistribute it and/or modify it
-# under the terms of the GNU Affero General Public License as published
-# by the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# OpenQuake is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU Affero General Public License
-# along with OpenQuake.  If not, see <http://www.gnu.org/licenses/>.
-
-"""
-The OpenQuake job supervisor process, spawned by each OpenQuake job.
-"""
-import logging
-import os
-import sys
-
-import oqpath
-oqpath.set_oq_path()
-
-
-def main():  # pylint: disable=C0111
-    os.environ['DJANGO_SETTINGS_MODULE'] = 'openquake.settings'
-
-    from openquake.supervising import supervisor
-
-    job_id = int(sys.argv[1])
-    pid = int(sys.argv[2])
-    supervisor.supervise(pid, job_id)
-
-
-if __name__ == '__main__':
-    main()
