Index: noq/openquake/calculators/hazard/general.py
===================================================================
--- noq.orig/openquake/calculators/hazard/general.py	2012-10-29 12:49:29.823565804 +0100
+++ noq/openquake/calculators/hazard/general.py	2012-10-29 12:52:52.184569250 +0100
@@ -37,7 +37,6 @@
 from shapely import geometry
 
 from openquake import engine2
-from openquake import java
 from openquake import kvs
 from openquake import writer
 from openquake.export import core as export_core
@@ -46,7 +45,6 @@
 from openquake.db import models
 from openquake.input import logictree
 from openquake.input import source
-from openquake.java import list_to_jdouble_array
 from openquake.job import params as job_params
 from openquake.job.validation import MAX_SINT_32
 from openquake.job.validation import MIN_SINT_32
@@ -77,53 +75,6 @@
 ROUTING_KEY_FMT = 'oq.job.%(job_id)s.htasks'
 
 
-def get_iml_list(imls, intensity_measure_type):
-    """Build the appropriate Arbitrary Discretized Func from the IMLs,
-    based on the IMT"""
-
-    return list_to_jdouble_array(
-        [IML_SCALING[intensity_measure_type](x) for x in imls])
-
-
-@java.unpack_exception
-def generate_erf(job_id, cache):
-    """ Generate the Earthquake Rupture Forecast from the source model data
-    stored in the KVS.
-
-    :param int job_id: id of the job
-    :param cache: jpype instance of `org.gem.engine.hazard.redis.Cache`
-    :returns: jpype instance of
-        `org.opensha.sha.earthquake.rupForecastImpl.GEM1.GEM1ERF`
-    """
-    src_key = kvs.tokens.source_model_key(job_id)
-    job_key = kvs.tokens.generate_job_key(job_id)
-
-    sources = java.jclass("JsonSerializer").getSourceListFromCache(
-        cache, src_key)
-
-    erf = java.jclass("GEM1ERF")(sources)
-
-    calc = java.jclass("LogicTreeProcessor")(cache, job_key)
-    calc.setGEM1ERFParams(erf)
-
-    return erf
-
-
-def generate_gmpe_map(job_id, cache):
-    """ Generate the GMPE map from the GMPE data stored in the KVS.
-
-    :param int job_id: id of the job
-    :param cache: jpype instance of `org.gem.engine.hazard.redis.Cache`
-    :returns: jpype instace of
-        `HashMap<TectonicRegionType, ScalarIntensityMeasureRelationshipAPI>`
-    """
-    gmpe_key = kvs.tokens.gmpe_key(job_id)
-
-    gmpe_map = java.jclass(
-        "JsonSerializer").getGmpeMapFromCache(cache, gmpe_key)
-    return gmpe_map
-
-
 def store_source_model(job_id, seed, params, calc):
     """Generate source model from the source model logic tree and store it in
     the KVS.
@@ -155,45 +106,6 @@
     calc.sample_and_save_gmpe_logictree(kvs.get_client(), key, seed)
 
 
-def set_gmpe_params(gmpe_map, params):
-    """Push parameters from the config file into the GMPE objects.
-
-    :param gmpe_map: jpype instance of
-        `HashMap<TectonicRegionType, ScalarIntensityMeasureRelationshipAPI>`
-    :param dict params: job config params
-    """
-    jpype = java.jvm()
-
-    jd_float = lambda x: jpype.JDouble(float(x))
-
-    component = params.get('COMPONENT')
-    imt = params.get('INTENSITY_MEASURE_TYPE')
-    # PERIOD is not used in UHS calculations.
-    period = (jd_float(params.get('PERIOD'))
-              if params.get('PERIOD') is not None else None)
-    damping = jd_float(params.get('DAMPING'))
-    gmpe_trunc_type = params.get('GMPE_TRUNCATION_TYPE')
-    trunc_level = jd_float(params.get('TRUNCATION_LEVEL'))
-    stddev_type = params.get('STANDARD_DEVIATION_TYPE')
-
-    j_set_gmpe_params = java.jclass("GmpeLogicTreeData").setGmpeParams
-    for tect_region in gmpe_map.keySet():
-        gmpe = gmpe_map.get(tect_region)
-        # There are two overloads for this method; one with 'period'...
-        if period is not None:
-            j_set_gmpe_params(
-                component, imt, period, damping,
-                gmpe_trunc_type, trunc_level, stddev_type,
-                jpype.JObject(gmpe, java.jclass("AttenuationRelationship")))
-        # ... and one without.
-        else:
-            j_set_gmpe_params(
-                component, imt, damping,
-                gmpe_trunc_type, trunc_level, stddev_type,
-                jpype.JObject(gmpe, java.jclass("AttenuationRelationship")))
-        gmpe_map.put(tect_region, gmpe)
-
-
 @transaction.commit_on_success(using='job_init')
 def store_site_model(input_mdl, site_model_source):
     """Invoke site model parser and save the site-specified parameter data to
@@ -400,178 +312,6 @@
     return site_data
 
 
-def set_java_site_parameters(jsite, sm_data):
-    """Given a site model node and an OpenSHA `Site` object,
-    set vs30, vs30, z2pt5, and z1pt0 parameters.
-
-    :param jsite:
-        A `org.opensha.commons.data.Site` jpype object.
-    :param sm_data:
-        :class:`openquake.db.models.SiteModel` instance.
-    :returns:
-        The ``jsite`` input object (so this function can be chained).
-    """
-    vs30_param = java.jclass("DoubleParameter")("Vs30")
-    vs30_param.setValue(sm_data.vs30)
-
-    vs30_type_param = java.jclass("StringParameter")("Vs30 Type")
-    vs30_type_param.setValue(sm_data.vs30_type)
-
-    z1pt0_param = java.jclass("DoubleParameter")("Depth 1.0 km/sec")
-    z1pt0_param.setValue(sm_data.z1pt0)
-
-    z2pt5_param = java.jclass("DoubleParameter")("Depth 2.5 km/sec")
-    z2pt5_param.setValue(sm_data.z2pt5)
-
-    jsite.addParameter(vs30_param)
-    jsite.addParameter(vs30_type_param)
-    jsite.addParameter(z1pt0_param)
-    jsite.addParameter(z2pt5_param)
-
-    return jsite
-
-
-class BaseHazardCalculator(base.Calculator):
-    """Contains common functionality for Hazard calculators"""
-
-    def initialize(self):
-        """Read the raw site model from the database and populate the
-        `uiapi.site_model`.
-        """
-        site_model = get_site_model(self.job_ctxt.oq_job.id)
-
-        if site_model is not None:
-            # Explicit cast to `str` here because the XML parser doesn't like
-            # unicode. (More specifically, lxml doesn't like unicode.)
-            site_model_content = str(site_model.model_content.raw_content)
-            store_site_model(site_model, StringIO.StringIO(site_model_content))
-
-            site_model_data = models.SiteModel.objects.filter(input=site_model)
-
-            validate_site_model(
-                site_model_data, self.job_ctxt.sites_to_compute()
-            )
-
-    def pre_execute(self):
-        basepath = self.job_ctxt.params.get('BASE_PATH')
-        if not self.job_ctxt['CALCULATION_MODE'] in (
-                'Scenario', 'Scenario Damage'):
-            source_model_lt = self.job_ctxt.params.get(
-                'SOURCE_MODEL_LOGIC_TREE_FILE_PATH')
-            gmpe_lt = self.job_ctxt.params.get('GMPE_LOGIC_TREE_FILE_PATH')
-            self.calc = logictree.LogicTreeProcessor(
-                basepath, source_model_lt, gmpe_lt)
-
-    def execute(self):
-        """Calculation logic goes here; subclasses must implement this."""
-        raise NotImplementedError()
-
-    def store_source_model(self, seed):
-        """Generates a source model from the source model logic tree."""
-        if getattr(self, "calc", None) is None:
-            self.pre_execute()
-        store_source_model(self.job_ctxt.job_id, seed,
-                           self.job_ctxt.params, self.calc)
-
-    def store_gmpe_map(self, seed):
-        """Generates a hash of tectonic regions and GMPEs, using the logic tree
-        specified in the job config file."""
-        if getattr(self, "calc", None) is None:
-            self.pre_execute()
-        store_gmpe_map(self.job_ctxt.job_id, seed, self.calc)
-
-    def generate_erf(self):
-        """Generate the Earthquake Rupture Forecast from the currently stored
-        source model logic tree."""
-        return generate_erf(self.job_ctxt.job_id, self.cache)
-
-    def set_gmpe_params(self, gmpe_map):
-        """Push parameters from configuration file into the GMPE objects"""
-        set_gmpe_params(gmpe_map, self.job_ctxt.params)
-
-    def generate_gmpe_map(self):
-        """Generate the GMPE map from the stored GMPE logic tree."""
-        gmpe_map = generate_gmpe_map(self.job_ctxt.job_id, self.cache)
-        self.set_gmpe_params(gmpe_map)
-        return gmpe_map
-
-    def parameterize_sites(self, site_list):
-        """Set vs30, vs30 type, z1pt0, z2pt5, and sadigh site type parameters
-        on all input sites, returning a jpype `ArrayList` of OpenSHA `Site`
-        objects.
-
-        For vs30, vs30 type, z1pt0, and z2pt5:
-        These params can be defined in general for the entire calculation.
-        Alternatively, the calculation can define a `SITE_MODEL`, which supply
-        site-specific parameters. This method handles both cases.
-
-        NOTE: If a `SITE_MODEL` is used, it needs to be properly stored first.
-        See :func:`~openquake.calculators.hazard.general.store_site_model`.
-
-        :param site_list:
-            `list` of :class:`~openquake.shapes.Site` objects.
-        :returns:
-            jpype `ArrayList` of `org.opensha.commons.data.Site` objects (with
-            the above parameters set).
-        """
-        # make sure the JVM is started
-        java.jvm()
-
-        # the return value
-        jsite_list = java.jclass("ArrayList")()
-
-        job_profile = self.job_ctxt.oq_job_profile
-
-        # The `sadigh site type` is the same in any case
-        sadigh_param = java.jclass("StringParameter")("Sadigh Site Type")
-        sadigh_param.setValue(
-            job_params.REVERSE_ENUM_MAP[job_profile.sadigh_site_type]
-        )
-
-        site_model = get_site_model(self.job_ctxt.oq_job.id)
-
-        if site_model is not None:
-            # set site-specific parameters:
-            for site in site_list:
-                jsite = site.to_java()
-
-                sm_data = get_closest_site_model_data(site_model, site)
-                set_java_site_parameters(jsite, sm_data)
-                # The sadigh site type param is not site specific, but we need
-                # to set it anyway.
-                jsite.addParameter(sadigh_param)
-
-                jsite_list.add(jsite)
-        else:
-            # use the same parameters for all sites
-            vs30_param = java.jclass("DoubleParameter")("Vs30")
-            vs30_param.setValue(job_profile.reference_vs30_value)
-
-            vs30_type_param = java.jclass("StringParameter")("Vs30 Type")
-            vs30_type_param.setValue(job_profile.vs30_type)
-
-            z1pt0_param = java.jclass("DoubleParameter")("Depth 1.0 km/sec")
-            z1pt0_param.setValue(job_profile.depth_to_1pt_0km_per_sec)
-
-            z2pt5_param = java.jclass("DoubleParameter")("Depth 2.5 km/sec")
-            z2pt5_param.setValue(
-                job_profile.reference_depth_to_2pt5km_per_sec_param
-            )
-
-            for site in site_list:
-                jsite = site.to_java()
-
-                jsite.addParameter(vs30_param)
-                jsite.addParameter(vs30_type_param)
-                jsite.addParameter(z1pt0_param)
-                jsite.addParameter(z2pt5_param)
-                jsite.addParameter(sadigh_param)
-
-                jsite_list.add(jsite)
-
-        return jsite_list
-
-
 def exchange_and_conn_args():
     """
     Helper method to setup an exchange for task communication and the args
Index: noq/openquake/export/hazard.py
===================================================================
--- noq.orig/openquake/export/hazard.py	2012-10-26 14:44:28.000000000 +0200
+++ noq/openquake/export/hazard.py	2012-10-29 12:52:52.232569490 +0100
@@ -25,7 +25,6 @@
 from openquake import logs
 from openquake.db import models
 from openquake.export import core
-from openquake.export import uhs
 from openquake.export.core import makedirs
 
 
@@ -70,7 +69,6 @@
     """
 
     fn_map = {
-        'uh_spectra': uhs.export_uhs,
         'hazard_curve': export_hazard_curves,
         'gmf': export_gmf,
         'ses': export_ses,
Index: noq/openquake/calculators/hazard/__init__.py
===================================================================
--- noq.orig/openquake/calculators/hazard/__init__.py	2012-10-29 12:49:29.000000000 +0100
+++ noq/openquake/calculators/hazard/__init__.py	2012-10-29 12:54:47.265139908 +0100
@@ -16,25 +16,12 @@
 """This package contains Hazard calculator classes and utilities."""
 
 
-from openquake.calculators.hazard.disagg.core import DisaggHazardCalculator
-from openquake.calculators.hazard.scenario.core import ScenarioHazardCalculator
-from openquake.calculators.hazard.uhs.core import UHSCalculator
-
 from openquake.calculators.hazard.classical.core import (
     ClassicalHazardCalculator)
 from openquake.calculators.hazard.event_based.core_next import (
     EventBasedHazardCalculator)
 
 
-CALCULATORS = {
-    'event_based': EventBasedHazardCalculator,
-    'event_based_bcr': EventBasedHazardCalculator,
-    'disaggregation': DisaggHazardCalculator,
-    'scenario': ScenarioHazardCalculator,
-    'scenario_damage': ScenarioHazardCalculator,
-    'uhs': UHSCalculator,
-}
-
 CALCULATORS_NEXT = {
     'classical': ClassicalHazardCalculator,
     'event_based': EventBasedHazardCalculator,
