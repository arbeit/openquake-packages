--- a/src/org/opensha/sha/magdist/GutenbergRichterMagFreqDist.java
+++ b/src/org/opensha/sha/magdist/GutenbergRichterMagFreqDist.java
@@ -2,13 +2,13 @@
  * Copyright 2009 OpenSHA.org in partnership with the Southern California
  * Earthquake Center (SCEC, http://www.scec.org) at the University of Southern
  * California and the UnitedStates Geological Survey (USGS; http://www.usgs.gov)
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
  * the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
@@ -32,7 +32,7 @@
  * Note that magLower and magUpper must exactly equal one of the descrete x-axis
  * values.
  * </p>
- * 
+ *
  * @author Nitin Gupta & Vipin Gupta Date: Aug 8, 2002
  * @version 1.0
  */
@@ -52,7 +52,7 @@
 
     /**
      * constructor : this is same as parent class constructor
-     * 
+     *
      * @param min
      * @param num
      * @param delta
@@ -63,12 +63,13 @@
     public GutenbergRichterMagFreqDist(double min, int num, double delta)
             throws InvalidRangeException {
         super(min, num, delta);
-        this.magLower = min;
+        this.magLower = this.minX;
+        this.magUpper = this.maxX;
     }
 
     /**
      * constructor: this is sameas parent class constructor
-     * 
+     *
      * @param min
      * @param max
      * @param num
@@ -83,7 +84,7 @@
 
     /**
      * constructor: this is sameas parent class constructor
-     * 
+     *
      * @param min
      * @param max
      * @param num
@@ -100,7 +101,7 @@
     /**
      * constructor: this constructor assumes magLower is minX and magUpper to be
      * maxX
-     * 
+     *
      * @param min
      * @param num
      * @param delta
@@ -119,7 +120,7 @@
 
     /**
      * constructor:
-     * 
+     *
      * @param min
      * @param num
      * @param delta
@@ -141,8 +142,94 @@
     }
 
     /**
+     * Add provided value to magUpper keeping total moment rate the same.
+     *
+     * @param magUpperIncrement
+     *           : value to add to magUpper
+     */
+    public void incrementMagUpper(double magUpperIncrement) {
+        // get old total moment rate
+        double totMoRate = getTotalMomentRate();
+
+        // calculate new magUpper with respect to existing delta
+        double newMagUpper = magUpper + magUpperIncrement;
+        newMagUpper = Math.round((newMagUpper - magLower) / delta) * delta + magLower;
+
+        // calculate new number of magnitude values
+        int numVal = (int) Math.round((newMagUpper - magLower) / delta + 1);
+
+        // changing the bins array
+        set(magLower, newMagUpper, numVal);
+
+        // preserving the same total moment rate
+        setAllButTotCumRate(magLower, newMagUpper, totMoRate, bValue);
+    }
+
+    /**
+     * Replace magUpper with a provided value.
+     *
+     * @param newMagUpper
+     *           : value to replace magUpper with, not shifted to a bin center.
+     */
+    public void setMagUpper(double newMagUpper) {
+    	double oldA = get_aValue();
+
+    	double totCumRate = Math.pow(10, oldA - bValue * (magLower - delta/2))
+    						- Math.pow(10, oldA - bValue * newMagUpper);
+
+    	newMagUpper -= delta / 2;
+    	// rounding with respect to delta
+    	newMagUpper = Math.round((newMagUpper - magLower) / delta) * delta + magLower;
+
+    	// calculate new number of magnitude values
+        int numVal = (int) Math.round((newMagUpper - magLower) / delta) + 1;
+
+        // changing the bins array
+        set(magLower, newMagUpper, numVal);
+
+    	setAllButTotMoRate(magLower, newMagUpper, totCumRate, bValue);
+    }
+
+    /**
+     * Replace values of a and b with provided numbers.
+     *
+     * @param newA
+     *           : new value for a
+     * @param newB
+     *           : new value for b
+     */
+    public void setAB(double newA, double newB) {
+        // compute total cumulative rate between minimum and maximum magnitude
+        double totCumRate;
+        if (magLower != magUpper) {
+            totCumRate =
+                    Math.pow(10, newA - newB * (magLower - delta/2))
+                            - Math.pow(10, newA - newB * (magUpper + delta/2));
+        } else {
+            // compute incremental a value and calculate rate corresponding to
+            // minimum magnitude
+            double aIncr = newA + Math.log10(newB * Math.log(10));
+            totCumRate = Math.pow(10, aIncr - newB * magLower);
+        }
+        setAllButTotMoRate(magLower, magUpper, totCumRate, newB);
+    }
+
+    /**
+     * Increment b value by provided number keeping the total moment rate
+     * the same.
+     *
+     * @param bValueIncrement
+     *           : increment value for b
+     */
+    public void incrementB(double bValueIncrement) {
+        double newBValue = bValue + bValueIncrement;
+        double totMoRate = getTotalMomentRate();
+        setAllButTotCumRate(magLower, magUpper, totMoRate, newBValue);
+    }
+
+    /**
      * Set all values except Cumulative Rate
-     * 
+     *
      * @param magLower
      *            : lowest magnitude that has non zero rate
      * @param magUpper
@@ -164,7 +251,7 @@
 
     /**
      * Set all values except total moment rate
-     * 
+     *
      * @param magLower
      *            : lowest magnitude that has non zero rate
      * @param magUpper
@@ -187,7 +274,7 @@
 
     /**
      * Set All but magUpper
-     * 
+     *
      * @param magLower
      *            : lowest magnitude that has non zero rate
      * @param totMoRate
@@ -285,7 +372,7 @@
      * the EvenlyDiscretizedFunc class by making a objects of the
      * GutenbergRitcherMagFreqDist class and calling the set functions of this
      * from outside
-     * 
+     *
      * @param point
      * @throws MagFreqDistException
      */
@@ -302,7 +389,7 @@
      * the EvenlyDiscretizedFunc class by making a objects of the
      * GutenbergRitcherMagFreqDist class and calling the set functions of this
      * from outside
-     * 
+     *
      * @param x
      * @param y
      * @throws MagFreqDistException
@@ -320,7 +407,7 @@
      * the EvenlyDiscretizedFunc class by making a objects of the
      * GutenbergRitcherMagFreqDist class and calling the set functions of this
      * from outside.
-     * 
+     *
      * @param index
      * @param y
      * @throws MagFreqDistException
@@ -366,7 +453,7 @@
     }
 
     /**
-     * 
+     *
      * @returns the cumulative rate at magLower
      */
 
@@ -375,7 +462,7 @@
     }
 
     /**
-     * @returns th bValue for this distribution
+     * @returns the bValue for this distribution
      */
 
     public double get_bValue() {
@@ -383,7 +470,22 @@
     }
 
     /**
-     * 
+     * @returns the computed aValue for this distribution
+     */
+    public double get_aValue() {
+    	double TMR = getTotalMomentRate();
+    	double mMax = magUpper + delta/2;
+    	double mMin = magLower - delta/2;
+
+    	double mb = 1.5 - bValue;
+
+    	return Math.log10(TMR * mb / (Math.pow(10, mb * mMax) - Math.pow(10, mb * mMin)))
+    		   - 9.05
+    		   - Math.log10(bValue);
+    }
+
+    /**
+     *
      * @returns the magLower : lowest magnitude that has non zero rate
      */
     public double getMagLower() {
@@ -391,7 +493,7 @@
     }
 
     /**
-     * 
+     *
      * @returns the magUpper : highest magnitude that has non zero rate
      */
     public double getMagUpper() {
@@ -400,7 +502,7 @@
 
     /**
      * returns the name of this class
-     * 
+     *
      * @return
      */
 
@@ -410,7 +512,7 @@
 
     /**
      * this function returns String for drawing Legen in JFreechart
-     * 
+     *
      * @return : returns the String which is needed for Legend in graph
      */
     public String getDefaultInfo() throws DataPoint2DException {
@@ -423,7 +525,7 @@
     /** Returns a rcopy of this and all points in this GutenbergRichter */
     /*
      * public DiscretizedFuncAPI deepClone() throws DataPoint2DException {
-     * 
+     *
      * GutenbergRichterMagFreqDist f = new GutenbergRichterMagFreqDist(minX,
      * num, delta); f.setAllButTotMoRate(this.magLower, this.magUpper,
      * this.getTotCumRate(), this.bValue); f.tolerance = tolerance; return f; }
@@ -431,20 +533,20 @@
 
     /**
      * this method (defined in parent) is deactivated here (name is finalized)
-     * 
+     *
      * public void setName(String name) throws UnsupportedOperationException{
      * throw new
      * UnsupportedOperationException("setName not allowed for MagFreqDist.");
-     * 
+     *
      * }
-     * 
-     * 
+     *
+     *
      * this method (defined in parent) is deactivated here (name is finalized)
-     * 
+     *
      * public void setInfo(String info)throws UnsupportedOperationException{
      * throw new
      * UnsupportedOperationException("setInfo not allowed for MagFreqDist.");
-     * 
+     *
      * }
      */
 
