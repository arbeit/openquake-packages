--- a/openquake/hazard/opensha.py
+++ b/openquake/hazard/opensha.py
@@ -26,6 +26,7 @@
 import random
 import functools
 
+import hashlib
 from itertools import izip
 
 from openquake import java
@@ -49,14 +50,20 @@
 HAZARD_MAP_FILENAME_PREFIX = 'hazardmap'
 
 
+# Module-private kvs connection cache, to be used by create_java_cache().
+__KVS_CONN_CACHE = {}
+
+
 def create_java_cache(fn):
     """A decorator for creating java cache object"""
 
     @functools.wraps(fn)
     def decorated(self, *args, **kwargs):  # pylint: disable=C0111
-        self.cache = java.jclass("KVS")(
-                config.get("kvs", "host"),
-                int(config.get("kvs", "port")))
+        kvs_data = (config.get("kvs", "host"), int(config.get("kvs", "port")))
+        key = hashlib.md5(repr(kvs_data)).hexdigest()
+        if key not in __KVS_CONN_CACHE:
+            __KVS_CONN_CACHE[key] = java.jclass("KVS")(*kvs_data)
+        self.cache = __KVS_CONN_CACHE[key]
         return fn(self, *args, **kwargs)
 
     return decorated
--- a/openquake/kvs/__init__.py
+++ b/openquake/kvs/__init__.py
@@ -22,6 +22,7 @@
 the underlying kvs systems.
 """
 
+import hashlib
 import json
 import numpy
 
@@ -107,11 +108,17 @@
     return get_client().get(key)
 
 
+# Module-private kvs connection cache, to be used by get_client().
+__KVS_CONN_CACHE = {}
+
+
 def get_client(**kwargs):
-    """possible kwargs:
-        db: database identifier
-    """
-    return Redis(**kwargs)
+    """Return a redis kvs client connection object."""
+    key = hashlib.md5(repr(kwargs)).hexdigest()
+    if key not in __KVS_CONN_CACHE:
+        __KVS_CONN_CACHE[key] = Redis(**kwargs)
+
+    return __KVS_CONN_CACHE[key]
 
 
 def get_value_json_decoded(key):
