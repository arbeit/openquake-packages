--- a/openquake/java.py
+++ b/openquake/java.py
@@ -29,6 +29,12 @@
 from functools import wraps
 
 from openquake import nrml
+from openquake.utils import config
+
+
+# JVM max. memory size (in MB) to be used (per celery worker process!)
+DEFAULT_JVM_MAX_MEM = 768
+
 
 JAVA_CLASSES = {
     'LogicTreeProcessor': "org.gem.engine.LogicTreeProcessor",
@@ -173,15 +179,37 @@
     jpype.JClass("org.apache.log4j.PropertyConfigurator").configure(props)
 
 
+def get_jvm_max_mem():
+    """
+    Determine what the JVM maximum memory size should be.
+
+    :returns: the maximum JVM memory size considering the possible sources in
+        the following order
+        * the value of the `OQ_JVM_MAXMEM` environment variable
+        * the setting in the config file
+        * a fixed default (`768` MB).
+    """
+    cfg = config.get_section("java")
+
+    if os.environ.get("OQ_JVM_MAXMEM"):
+        return int(os.environ.get("OQ_JVM_MAXMEM"))
+
+    return int(cfg["max_mem"]) if cfg["max_mem"] else DEFAULT_JVM_MAX_MEM
+
+
 def jvm():
-    """Return the jpype module, after guaranteeing the JVM is running and
-    the classpath has been loaded properly."""
+    """
+    Return the jpype module, after guaranteeing the JVM is running and
+    the classpath has been loaded properly.
+    """
     jarpaths = (os.path.abspath(
                     os.path.join(os.path.dirname(__file__), "../dist")),
                 '/usr/share/java')
 
     if not jpype.isJVMStarted():
+        max_mem = get_jvm_max_mem()
         jpype.startJVM(jpype.getDefaultJVMPath(),
+            "-Xmx%sM" % max_mem,
             "-Djava.ext.dirs=%s:%s" % jarpaths,
             # setting Schema path here is ugly, but it's better than
             # doing it before all XML parsing calls
--- a/openquake/openquake.cfg
+++ b/openquake/openquake.cfg
@@ -49,3 +49,7 @@
 
 reslt_writer_password = openquake
 reslt_writer_user = oq_reslt_writer
+
+[java]
+# JVM max. memory size (in MB) to be used (per celery worker process!)
+max_mem = 768
