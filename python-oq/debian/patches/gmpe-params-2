--- a/openquake/db/models.py
+++ b/openquake/db/models.py
@@ -661,11 +661,11 @@
     #       Lat, Lon, Magnitude, Epsilon, and Tectonic Region Type)
     disagg_results = CharArrayField(null=True)
     VS30_TYPE_CHOICES = (
-       (u'measured', u'Value obtained from on-site measurements'),
-       (u'inferred', u'Estimated value'),
+       (u"measured", u"Value obtained from on-site measurements"),
+       (u"inferred", u"Estimated value"),
     )
-    vs30_type = models.TextField(choices=VS30_TYPE_CHOICES)
-    depth_to_1pt_0km_per_sec = models.FloatField()
+    vs30_type = models.TextField(choices=VS30_TYPE_CHOICES, default="measured")
+    depth_to_1pt_0km_per_sec = models.FloatField(default=100.0)
 
     class Meta:  # pylint: disable=C0111,W0232
         db_table = 'uiapi\".\"oq_params'
--- a/openquake/hazard/opensha.py
+++ b/openquake/hazard/opensha.py
@@ -187,9 +187,19 @@
                     self.params['REFERENCE_DEPTH_TO_2PT5KM_PER_SEC_PARAM']))
             sadigh = java.jclass("StringParameter")("Sadigh Site Type")
             sadigh.setValue(self.params['SADIGH_SITE_TYPE'])
+
+            depth1km = java.jclass("DoubleParameter")(jpype.JString(
+                "Depth 1.0 km/sec"))
+            depth1km.setValue(float(self.params['DEPTHTO1PT0KMPERSEC']))
+            vs30_type = java.jclass("StringParameter")("Vs30 Type")
+            # Enum values must be capitalized in the Java domain!
+            vs30_type.setValue(self.params['VS30_TYPE'].capitalize())
+
             site.addParameter(vs30)
             site.addParameter(depth25)
             site.addParameter(sadigh)
+            site.addParameter(depth1km)
+            site.addParameter(vs30_type)
             jsite_list.add(site)
         return jsite_list
 
--- a/openquake/job/config.py
+++ b/openquake/job/config.py
@@ -81,8 +81,8 @@
             yield v
 
     def is_valid(self):
-        """Return true if all validators defined in this set
-        are valid, false otherwise.
+        """Return `True` if all validators defined in this set
+        are valid, `False` otherwise.
 
         :returns: the status of this set and the related error messages.
         :rtype: when valid, a (True, []) tuple is returned. When invalid, a
@@ -118,23 +118,22 @@
     def __init__(self, sections, params):
         self.sections = sections
         self.params = params
-        self.section_of_interest = None
-        self.mandatory_params = []
 
     def is_valid(self):
-        """Return true if the mandatory risk parameters are specified,
-        false otherwise. When invalid returns also the error messages.
+        """
+        Return `True` if the mandatory parameters are specified, `False`
+        otherwise.
 
         :returns: the status of this validator and the related error messages.
         :rtype: when valid, a (True, []) tuple is returned. When invalid, a
             (False, [ERROR_MESSAGE#1, ERROR_MESSAGE#2, ..., ERROR_MESSAGE#N])
             tuple is returned
         """
-        if self.section_of_interest in self.sections:
-            for mandatory_param in self.mandatory_params:
+        if self.SECTION_OF_INTEREST in self.sections:
+            for mandatory_param in self.MANDATORY_PARAMS:
                 if mandatory_param not in self.params.keys():
                     msg = ("Parameter '%s' not supplied in section '%s'" %
-                           (mandatory_param, self.section_of_interest))
+                           (mandatory_param, self.SECTION_OF_INTEREST))
                     return (False, [msg])
 
         return (True, [])
@@ -145,11 +144,12 @@
     Validator that checks whether the mandatory parameters
     for risk processing are specified.
     """
+    SECTION_OF_INTEREST = RISK_SECTION
+    MANDATORY_PARAMS = [EXPOSURE, INPUT_REGION, REGION_GRID_SPACING]
+
     def __init__(self, sections, params):
         super(
             RiskMandatoryParamsValidator, self).__init__(sections, params)
-        self.section_of_interest = RISK_SECTION
-        self.mandatory_params = [EXPOSURE, INPUT_REGION, REGION_GRID_SPACING]
 
 
 class HazardMandatoryParamsValidator(MandatoryParamsValidator):
@@ -157,11 +157,42 @@
     Validator that checks whether the mandatory parameters
     for hazard processing are specified.
     """
+    SECTION_OF_INTEREST = HAZARD_SECTION
+    MANDATORY_PARAMS = [DEPTHTO1PT0KMPERSEC, VS30_TYPE]
+
     def __init__(self, sections, params):
         super(
             HazardMandatoryParamsValidator, self).__init__(sections, params)
-        self.section_of_interest = HAZARD_SECTION
-        self.mandatory_params = [DEPTHTO1PT0KMPERSEC, VS30_TYPE]
+
+    def is_valid(self):
+        """
+        Return `True` if the mandatory parameters are specified, `False`
+        otherwise.
+
+        This will additionally check that all mandatory hazard parameters have
+        the "java_name" property set.
+
+        :returns: the status of this validator and the related error messages.
+        :rtype: when valid, a (True, []) tuple is returned. When invalid, a
+            (False, [ERROR_MESSAGE#1, ERROR_MESSAGE#2, ..., ERROR_MESSAGE#N])
+            tuple is returned
+        """
+        result, msgs = super(HazardMandatoryParamsValidator, self).is_valid()
+        # The check failed in the base class already, just return.
+        if not result:
+            return (result, msgs)
+        # The check in the base class succeeded. Now -- in addition -- make
+        # sure that we have a 'java_name' set for each mandatory hazard
+        # parameter.
+        params_lacking_java_name = [p for p in self.MANDATORY_PARAMS
+                                    if PARAMS[p].java_name is None]
+        if params_lacking_java_name:
+            msg = ("The following mandatory hazard parameter(s) lack "
+                   "a 'java_name' property: %s"
+                   % ", ".join(params_lacking_java_name))
+            return(False, [msg])
+        else:
+            return (result, msgs)
 
 
 class ComputationTypeValidator(object):
@@ -172,8 +203,8 @@
         self.params = params
 
     def is_valid(self):
-        """Return true if the user has specified the region
-        or the set of sites, false otherwise.
+        """Return `True` if the user has specified the region
+        or the set of sites, `False` otherwise.
         """
         has_input_region = INPUT_REGION in self.params
         has_sites = SITES in self.params
@@ -202,8 +233,8 @@
         self.sections = sections
 
     def is_valid(self):
-        """Return true if the deterministic calculation mode
-        specified is for an hazard + risk job, false otherwise."""
+        """Return `True` if the deterministic calculation mode
+        specified is for an hazard + risk job, `False` otherwise."""
 
         if RISK_SECTION not in self.sections \
                 and self.params[CALCULATION_MODE] == DETERMINISTIC_MODE:
--- a/openquake/job/params.py
+++ b/openquake/job/params.py
@@ -31,7 +31,7 @@
 ARRAY_RE = re.compile('[ ,]+')
 
 # pylint: disable=C0103
-Param = namedtuple('Param', 'column type default modes to_db')
+Param = namedtuple('Param', 'column type default modes to_db java_name')
 
 # TODO unify with utils/oqrunner/config_writer.py
 CALCULATION_MODE = {
@@ -111,7 +111,8 @@
 
 
 # pylint: disable=W0212
-def define_param(name, column, modes=None, default=None, to_db=None):
+def define_param(name, column, modes=None, default=None, to_db=None,
+                 java_name=None):
     """
     Adds a new parameter definition to the PARAMS dictionary
 
@@ -126,6 +127,7 @@
         explicitly defined in a job config.
     :param to_db: A function to transform this parameter for storage in the
         database. Defaults to `None` if no transformation is required.
+    :param str java_name: the name of the parameter in the Java domain.
     """
 
     if modes is None:
@@ -140,11 +142,13 @@
 
     if column == None:
         PARAMS[name] = Param(column=column, type=None, default=default,
-                             modes=modes, to_db=None)
+                             modes=modes, to_db=None, java_name=java_name)
     else:
         column_type = type(OqParams._meta.get_field_by_name(column)[0])
         PARAMS[name] = Param(column=column, type=column_type,
-                             default=default, modes=modes, to_db=to_db)
+                             default=default, modes=modes, to_db=to_db,
+                             java_name=java_name)
+
 
 # general params
 define_param('CALCULATION_MODE', None)
@@ -153,9 +157,10 @@
 define_param('REGION_VERTEX', 'region')
 define_param('OUTPUT_DIR', None)
 define_param('BASE_PATH', None)
-define_param('DEPTHTO1PT0KMPERSEC', 'depth_to_1pt_0km_per_sec')
-define_param('VS30_TYPE', 'vs30_type')
-
+define_param("DEPTHTO1PT0KMPERSEC", "depth_to_1pt_0km_per_sec",
+             default=100.0, java_name="Depth 1.0 km/sec")
+define_param("VS30_TYPE", "vs30_type", default="measured",
+             java_name="Vs30 Type")
 
 # input files
 define_param('VULNERABILITY', None)
@@ -279,13 +284,15 @@
 define_param('PERIOD', 'period', default=0.0)
 define_param('POES', 'poes', modes=('classical', 'disaggregation'))
 define_param('QUANTILE_LEVELS', 'quantile_levels', modes='classical')
-define_param('REFERENCE_DEPTH_TO_2PT5KM_PER_SEC_PARAM',
-             'reference_depth_to_2pt5km_per_sec_param')
-define_param('REFERENCE_VS30_VALUE', 'reference_vs30_value')
+define_param("REFERENCE_DEPTH_TO_2PT5KM_PER_SEC_PARAM",
+             "reference_depth_to_2pt5km_per_sec_param",
+             java_name="Depth 2.5 km/sec")
+define_param("REFERENCE_VS30_VALUE", "reference_vs30_value", java_name="Vs30")
 define_param('RISK_CELL_SIZE', 'risk_cell_size')
 define_param('RUPTURE_SURFACE_DISCRETIZATION',
              'rupture_surface_discretization', modes='deterministic')
-define_param('SADIGH_SITE_TYPE', 'sadigh_site_type', to_db=map_enum)
+define_param("SADIGH_SITE_TYPE", "sadigh_site_type", to_db=map_enum,
+             java_name="Sadigh Site Type")
 define_param('SOURCE_MODEL_LT_RANDOM_SEED', 'source_model_lt_random_seed',
              modes=('classical', 'event_based', 'disaggregation'))
 define_param('STANDARD_DEVIATION_TYPE', 'standard_deviation_type',
