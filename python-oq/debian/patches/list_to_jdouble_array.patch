--- a/openquake/hazard/disagg/core.py
+++ b/openquake/hazard/disagg/core.py
@@ -30,9 +30,10 @@
 
 from openquake.hazard import job as haz_job
 from openquake.hazard import disagg
+from openquake.java import list_to_jdouble_array
 from openquake.job import config as job_cfg
 from openquake.output import hazard_disagg as hazard_output
-from openquake.utils import config, list_to_jdouble_array
+from openquake.utils import config
 
 from openquake.hazard.disagg import subsets
 from openquake.hazard.general import (
--- a/openquake/hazard/general.py
+++ b/openquake/hazard/general.py
@@ -27,7 +27,7 @@
 from openquake import logs
 
 from openquake.input import logictree
-from openquake.utils import list_to_jdouble_array
+from openquake.java import list_to_jdouble_array
 
 from openquake.job.mixins import Mixin
 
--- a/openquake/hazard/uhs/core.py
+++ b/openquake/hazard/uhs/core.py
@@ -25,9 +25,9 @@
 from celery.task import task
 
 from openquake import java
+from openquake.java import list_to_jdouble_array
 from openquake.job import Job
 from openquake.logs import LOG
-from openquake.utils import list_to_jdouble_array
 from openquake.hazard.general import (
     generate_erf, generate_gmpe_map, set_gmpe_params, get_iml_list)
 from openquake.utils import config
--- a/openquake/java.py
+++ b/openquake/java.py
@@ -337,3 +337,15 @@
             raise JavaException(e), None, trace
 
     return unwrap_exception
+
+
+def list_to_jdouble_array(float_list):
+    """Convert a 1D list of floats to a 1D Java Double[] (as a jpype object).
+    """
+    jp = jvm()
+    jdouble = jp.JArray(jp.java.lang.Double)(len(float_list))
+
+    for i, val in enumerate(float_list):
+        jdouble[i] = jp.JClass('java.lang.Double')(val)
+
+    return jdouble
--- a/openquake/utils/__init__.py
+++ b/openquake/utils/__init__.py
@@ -3,8 +3,6 @@
 
 import decimal
 
-from openquake import java
-
 
 def round_float(value):
     """
@@ -30,15 +28,3 @@
         decimal.Decimal(str(value)).quantize(
             decimal.Decimal(quantize_str),
             rounding=decimal.ROUND_HALF_EVEN))
-
-
-def list_to_jdouble_array(float_list):
-    """Convert a 1D list of floats to a 1D Java Double[] (as a jpype object).
-    """
-    jp = java.jvm()
-    jdouble = jp.JArray(jp.java.lang.Double)(len(float_list))
-
-    for i, val in enumerate(float_list):
-        jdouble[i] = jp.JClass('java.lang.Double')(val)
-
-    return jdouble
