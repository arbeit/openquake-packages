--- a/bin/create_oq_schema
+++ b/bin/create_oq_schema
@@ -11,6 +11,7 @@
 The command line arguments are as follows:
 
     --db-name=name      The name of the database to set up.
+    --db-port=port      The postgresql server port (default: 5432)
     --db-user=user      Run all commands as this database user [postgres].
     --no-tab-spaces     Don't check/create table spaces and their paths
     --schema-path=path  Absolute path to directory with the schema files.
@@ -24,13 +25,6 @@
     help
 fi
 
-if [ "$(id -u)" != "0" ]; then
-    echo ""
-    echo "!! This script should be run as root." 1>&2
-    echo "!! Press <enter> to continue, or <ctrl>-C to abort"
-    read
-fi
-
 # Openquake version
 oq_version="0.6.1"
 
@@ -42,6 +36,7 @@
 # What table spaces should be created?
 tspace_list="admin eqcat hzrdi hzrdr oqmif riski riskr uiapi"
 
+db_port=5432
 schema_path=""
 db_name=""
 user_interaction="on"
@@ -89,6 +84,9 @@
     --db-name=*)
         db_name=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
         ;;
+    --db-port=*)
+        db_port=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
+        ;;
     --db-user=*)
         db_admin_user=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
         ;;
@@ -134,13 +132,13 @@
 
     # Drop database
     echo ".. Dropping database $db_name .."
-    psql -d postgres -U $db_admin_user -c "DROP DATABASE IF EXISTS $db_name"
+    psql -p $db_port -d postgres -U $db_admin_user -c "DROP DATABASE IF EXISTS $db_name"
     # Drop table spaces..
     if [ "$check_table_spaces" == "on" ]; then
         for tspace in $tspace_list; do
             full_ts_name="${tspace}_ts"
             echo ".. Dropping table space $full_ts_name .."
-            psql -d postgres -U $db_admin_user -c "DROP TABLESPACE IF EXISTS $full_ts_name"
+            psql -p $db_port -d postgres -U $db_admin_user -c "DROP TABLESPACE IF EXISTS $full_ts_name"
         done
     fi
 else
@@ -148,7 +146,7 @@
 fi
 
 echo -n ".. Current table spaces: "
-echo `psql -U $db_admin_user -c '\db' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }'`
+echo `psql -p $db_port -U $db_admin_user -c '\db' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }'`
 
 if [ "$check_table_spaces" == "on" ]; then
     # Create table spaces if needed.
@@ -169,12 +167,12 @@
         fi
 
         # Create the actual table space.
-        ts_found=`psql -U $db_admin_user -c '\db' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $full_ts_name | wc -l`
+        ts_found=`psql -p $db_port -U $db_admin_user -c '\db' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $full_ts_name | wc -l`
         if [ $ts_found -eq 0 ]; then
-            psql -d postgres -U $db_admin_user -c "CREATE TABLESPACE $full_ts_name LOCATION '$full_tspace_path'"
+            psql -p $db_port -d postgres -U $db_admin_user -c "CREATE TABLESPACE $full_ts_name LOCATION '$full_tspace_path'"
             if [ "$table_spaces_only" == "on" ]; then
-                psql -U $db_admin_user -d $db_name -c "DELETE FROM admin.revision_info WHERE artefact = 'openquake/${tspace}'"
-                psql -U $db_admin_user -d $db_name -c "INSERT INTO admin.revision_info(artefact, revision, step) VALUES('openquake/${tspace}', '${oq_version}', 0)"
+                psql -p $db_port -U $db_admin_user -d $db_name -c "DELETE FROM admin.revision_info WHERE artefact = 'openquake/${tspace}'"
+                psql -p $db_port -U $db_admin_user -d $db_name -c "INSERT INTO admin.revision_info(artefact, revision, step) VALUES('openquake/${tspace}', '${oq_version}', 0)"
             fi
         fi
     done
@@ -190,52 +188,52 @@
 
 # Create the OpenQuake database
 echo ".. Creating database $db_name .."
-psql -d postgres -U $db_admin_user -c "CREATE DATABASE $db_name"
+psql -p $db_port -d postgres -U $db_admin_user -c "CREATE DATABASE $db_name"
 createlang -d $db_name -U $db_admin_user plpythonu
 
 postgis="/usr/share/postgresql/9.1/contrib/postgis-1.5"
 # Load the PostGIS stuff into the newly created OpenQuake database.
 echo ".. Loading postgis functions/data into $db_name .."
-psql -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/postgis.sql
+psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/postgis.sql
 
-psql -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/spatial_ref_sys.sql
-psql -U $db_admin_user $psql_batch_options -d $db_name -f /usr/share/postgresql/9.1/contrib/postgis_comments.sql
+psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $postgis/spatial_ref_sys.sql
+psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f /usr/share/postgresql/9.1/contrib/postgis_comments.sql
 
 echo ".. Running schema definition file: $schema_file .."
-psql -U $db_admin_user $psql_batch_options -d $db_name -f $schema_file
+psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $schema_file
 
 # Apply database function definitions if present.
 functions_file="$schema_path/functions.sql"
 if [ -r $functions_file ]; then
     echo ".. Running functions file: $functions_file .."
-    psql -U $db_admin_user $psql_batch_options -d $db_name -f $functions_file
+    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $functions_file
 fi
 
 # Load static data if present.
 load_file="$schema_path/load.sql"
 if [ -r $load_file ]; then
     echo ".. Loading static data from: $load_file .."
-    psql -U $db_admin_user $psql_batch_options -d $db_name -f $load_file
+    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $load_file
 fi
 
 # Apply database schema/table comments if present.
 comments_file="$schema_path/comments.sql"
 if [ -r $comments_file ]; then
     echo ".. Running comments file: $comments_file .."
-    psql -U $db_admin_user $psql_batch_options -d $db_name -f $comments_file
+    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $comments_file
 fi
 
 # Create OpenQuake database group if not present.
-oq_group_present=`psql -U $db_admin_user -c '\dg' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $db_group_name | wc -l`
+oq_group_present=`psql -p $db_port -U $db_admin_user -c '\dg' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $db_group_name | wc -l`
 if [ $oq_group_present -eq 0 ]; then
-    psql -d postgres -U $db_admin_user -c "CREATE ROLE $db_group_name"
+    psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $db_group_name"
 fi
 
 # Create OpenQuake database users/roles if/as needed.
 for role in $db_roles; do
-    role_present=`psql -U $db_admin_user -c '\dg' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $role | wc -l`
+    role_present=`psql -p $db_port -U $db_admin_user -c '\dg' -d postgres | perl -lane 'if ($_ =~ /^\s\S+/) { print $F[0] unless $. < 3 }' | grep $role | wc -l`
     if [ $role_present -eq 0 ]; then
-        psql -d postgres -U $db_admin_user -c "CREATE ROLE $role WITH LOGIN IN GROUP openquake"
+        psql -p $db_port -d postgres -U $db_admin_user -c "CREATE ROLE $role WITH LOGIN IN GROUP openquake"
     fi
 done
 
@@ -243,12 +241,12 @@
 security_file="$schema_path/security.sql"
 if [ -r $security_file ]; then
     echo ".. Running security settings file: $security_file .."
-    psql -U $db_admin_user $psql_batch_options -d $db_name -f $security_file
+    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $security_file
 fi
 
 # Apply database table indexes if present.
 indexes_file="$schema_path/indexes.sql"
 if [ -r $indexes_file ]; then
     echo ".. Applying index definitions: $indexes_file .."
-    psql -U $db_admin_user $psql_batch_options -d $db_name -f $indexes_file
+    psql -p $db_port -U $db_admin_user $psql_batch_options -d $db_name -f $indexes_file
 fi
