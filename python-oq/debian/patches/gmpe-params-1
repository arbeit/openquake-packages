--- a/openquake/db/models.py
+++ b/openquake/db/models.py
@@ -17,6 +17,7 @@
 # version 3 along with OpenQuake.  If not, see
 # <http://www.gnu.org/licenses/lgpl-3.0.txt> for a copy of the LGPLv3 License.
 
+# pylint: disable=C0302
 
 '''
 Model representations of the OpenQuake DB tables.
@@ -551,7 +552,8 @@
     # the default is 3.0 and document it. I definitely don't remember why it's
     # 3.0.
     truncation_level = models.FloatField(default=3.0)
-    reference_vs30_value = models.FloatField()
+    reference_vs30_value = models.FloatField(
+        "Average shear-wave velocity in the upper 30 meters of a site")
     imls = FloatArrayField(null=True)
     poes = FloatArrayField(null=True)
     realizations = models.IntegerField(null=True)
@@ -658,6 +660,12 @@
     #   fulldisaggmatrix (The full disaggregation matrix; includes
     #       Lat, Lon, Magnitude, Epsilon, and Tectonic Region Type)
     disagg_results = CharArrayField(null=True)
+    VS30_TYPE_CHOICES = (
+       (u'measured', u'Value obtained from on-site measurements'),
+       (u'inferred', u'Estimated value'),
+    )
+    vs30_type = models.TextField(choices=VS30_TYPE_CHOICES)
+    depth_to_1pt_0km_per_sec = models.FloatField()
 
     class Meta:  # pylint: disable=C0111,W0232
         db_table = 'uiapi\".\"oq_params'
--- a/openquake/db/schema/openquake.sql
+++ b/openquake/db/schema/openquake.sql
@@ -984,6 +984,11 @@
             OR
             ((job_type != 'disaggregation')
             AND (disagg_results IS NULL)))),
+    depth_to_1pt_0km_per_sec float NOT NULL DEFAULT 100.0
+        CONSTRAINT depth_to_1pt_0km_per_sec_above_zero
+        CHECK(depth_to_1pt_0km_per_sec > 0.0),
+    vs30_type VARCHAR NOT NULL DEFAULT 'measured' CONSTRAINT vs30_type_value
+        CHECK(vs30_type IN ('measured', 'inferred')),
     -- timestamp
     last_update timestamp without time zone
         DEFAULT timezone('UTC'::text, now()) NOT NULL
--- a/openquake/job/config.py
+++ b/openquake/job/config.py
@@ -40,10 +40,12 @@
 SITES = "SITES"
 DETERMINISTIC_MODE = "Deterministic"
 DISAGGREGATION_MODE = "Disaggregation"
-CALCULATION_MODE = "CALCULATION_MODE"
 BASE_PATH = "BASE_PATH"
 COMPUTE_HAZARD_AT_ASSETS = "COMPUTE_HAZARD_AT_ASSETS_LOCATIONS"
 
+DEPTHTO1PT0KMPERSEC = "DEPTHTO1PT0KMPERSEC"
+VS30_TYPE = "VS30_TYPE"
+
 
 def to_float_array(value):
     """Convert string value to floating point value array"""
@@ -65,7 +67,6 @@
 
     def __str__(self):
         msg = 'The job configuration contained some errors:\n\n'
-
         return msg + '\n'.join(self.errors)
 
 
@@ -110,13 +111,15 @@
         self.validators.append(validator)
 
 
-class RiskMandatoryParametersValidator(object):
+class MandatoryParamsValidator(object):
     """Validator that checks if the mandatory parameters
     for risk processing are specified."""
 
     def __init__(self, sections, params):
         self.sections = sections
         self.params = params
+        self.section_of_interest = None
+        self.mandatory_params = []
 
     def is_valid(self):
         """Return true if the mandatory risk parameters are specified,
@@ -127,19 +130,40 @@
             (False, [ERROR_MESSAGE#1, ERROR_MESSAGE#2, ..., ERROR_MESSAGE#N])
             tuple is returned
         """
-
-        mandatory_params = [EXPOSURE, INPUT_REGION, REGION_GRID_SPACING]
-
-        if RISK_SECTION in self.sections:
-            for mandatory_param in mandatory_params:
+        if self.section_of_interest in self.sections:
+            for mandatory_param in self.mandatory_params:
                 if mandatory_param not in self.params.keys():
-                    return (False, [
-                            "With RISK processing, EXPOSURE, REGION_VERTEX " +
-                            "and REGION_GRID_SPACING must be specified"])
+                    msg = ("Parameter '%s' not supplied in section '%s'" %
+                           (mandatory_param, self.section_of_interest))
+                    return (False, [msg])
 
         return (True, [])
 
 
+class RiskMandatoryParamsValidator(MandatoryParamsValidator):
+    """
+    Validator that checks whether the mandatory parameters
+    for risk processing are specified.
+    """
+    def __init__(self, sections, params):
+        super(
+            RiskMandatoryParamsValidator, self).__init__(sections, params)
+        self.section_of_interest = RISK_SECTION
+        self.mandatory_params = [EXPOSURE, INPUT_REGION, REGION_GRID_SPACING]
+
+
+class HazardMandatoryParamsValidator(MandatoryParamsValidator):
+    """
+    Validator that checks whether the mandatory parameters
+    for hazard processing are specified.
+    """
+    def __init__(self, sections, params):
+        super(
+            HazardMandatoryParamsValidator, self).__init__(sections, params)
+        self.section_of_interest = HAZARD_SECTION
+        self.mandatory_params = [DEPTHTO1PT0KMPERSEC, VS30_TYPE]
+
+
 class ComputationTypeValidator(object):
     """Validator that checks if the user has specified the correct
     algorithm to use for grabbing the sites to compute."""
@@ -377,7 +401,8 @@
         :py:class:`openquake.config.ValidatorSet`
     """
 
-    exposure = RiskMandatoryParametersValidator(sections, params)
+    hazard = HazardMandatoryParamsValidator(sections, params)
+    exposure = RiskMandatoryParamsValidator(sections, params)
     deterministic = DeterministicComputationValidator(sections, params)
     hazard_comp_type = ComputationTypeValidator(params)
     file_path = FilePathValidator(params)
@@ -389,6 +414,7 @@
     validators.add(exposure)
     validators.add(parameter)
     validators.add(file_path)
+    validators.add(hazard)
 
     if params.get(CALCULATION_MODE) == DISAGGREGATION_MODE:
         validators.add(DisaggregationValidator(params))
--- a/openquake/job/params.py
+++ b/openquake/job/params.py
@@ -153,6 +153,8 @@
 define_param('REGION_VERTEX', 'region')
 define_param('OUTPUT_DIR', None)
 define_param('BASE_PATH', None)
+define_param('DEPTHTO1PT0KMPERSEC', 'depth_to_1pt_0km_per_sec')
+define_param('VS30_TYPE', 'vs30_type')
 
 
 # input files
